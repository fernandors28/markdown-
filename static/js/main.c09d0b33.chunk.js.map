{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["placeholder","marked","setOptions","renderer","Renderer","highlight","code","lang","prism","languages","javascript","use","image","href","title","text","html","App","props","state","data","previewmaximized","editmaximized","handleChange","bind","handleEditorMaximize","handlePreviewMaximize","a","this","setState","target","value","classes","className","icon","onClick","onChange","React","Component","Toolbar","Edit","id","type","Preview","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAMMA,EAAW,ypCA6CjBC,IAAOC,WAAW,CAChBC,SAAU,IAAIF,IAAOG,SACrBC,UAAW,SAASC,EAAMC,GAIxB,OAHaC,IAGDH,UAAUC,EAAKE,IAAMC,UAAUC,WAAY,iBAW3DT,IAAOU,IAAI,CAACR,SARK,CACfS,MADe,SACTC,EAAMC,EAAOC,GACjB,MAAM,YAAN,OAAkBF,EAAlB,2BAOJ,IAAMG,EAAOf,IAAOD,GAEdiB,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACCC,MAAQ,CACXC,KAAMpB,EACNqB,kBAAkB,EAClBC,eAAe,GAEnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,sBAAsB,EAAKA,sBAAsBF,KAA3B,gBATX,E,gDAWlB,SAAaG,GACXC,KAAKC,SAAS,CACZT,KAAMO,EAAEG,OAAOC,U,kCAGnB,WACEH,KAAKC,SAAS,CACZP,eAAgBM,KAAKT,MAAMG,kB,mCAG/B,WACEM,KAAKC,SAAS,CACZR,kBAAkBO,KAAKT,MAAME,qB,oBAMjC,WACE,IAAIW,EAAU,GAYd,OATEA,GAD8B,IAA7BJ,KAAKT,MAAMG,cACF,CAAC,iBAAiB,eAAe,gCAEH,IAAhCM,KAAKT,MAAME,iBACT,CAAC,YAAY,iBAAiB,+BAG/B,CAAC,QAAQ,OAAQ,qBAK1B,qBAAKY,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAWD,EAAQ,GAAxB,UACE,cAAC,EAAD,CACEjB,KAAK,SACLmB,KAAMF,EAAQ,GACdG,QAASP,KAAKH,uBAGhB,cAAC,EAAD,CACEL,KAAMQ,KAAKT,MAAMC,KACjBgB,SAAUR,KAAKL,kBAGnB,sBAAKU,UAAWD,EAAQ,GAAxB,UACE,cAAC,EAAD,CACEjB,KAAK,UACLmB,KAAMF,EAAQ,GACdG,QAASP,KAAKF,wBAEhB,cAAC,EAAD,CACEN,KAAMQ,KAAKT,MAAMC,mB,GAlEbiB,IAAMC,WA4ElBC,EAAU,SAACrB,GAEf,OACA,sBAAKe,UAAU,UAAf,UACE,mBAAGA,UAAU,yBACVf,EAAMH,KACT,mBAAGkB,UAAWf,EAAMgB,KAAMC,QAASjB,EAAMiB,cAKvCK,EAAM,SAACtB,GACX,OACE,0BAAWuB,GAAG,SAAQC,KAAK,OAAOX,MAAOb,EAAME,KAAMgB,SAAUlB,EAAMkB,YAGnEO,EAAQ,SAACzB,GACb,OAEE,qBAAKe,UAAU,OAAOW,wBAAyB,CAACC,OAAQ5C,IAAOiB,EAAME,KAAM,CAAEJ,KAAMA,KAAUyB,GAAG,aAOrFxB,ICjKA6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c09d0b33.chunk.js","sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport marked from \"marked\";\nimport prism from \"prismjs\";\nimport \"prismjs/themes/prism.css\"\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;\n\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  highlight: function(code, lang) {\n    const hljs = prism;\n   \n    \n    return hljs.highlight(code,prism.languages.javascript, 'javascript');\n  }\n});\nconst renderer = {\n  image(href, title, text){\n    return`<img src=${href} class=\"img-fluid\">`;\n  }\n  \n};\n\n\nmarked.use({renderer});\nconst html = marked(placeholder);\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n      this.state = {\n        data: placeholder,\n        previewmaximized: false,\n        editmaximized: false\n      };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n    this.handlePreviewMaximize=this.handlePreviewMaximize.bind(this);\n  };    \n  handleChange(a){\n    this.setState({\n      data: a.target.value\n    })\n  };\n  handleEditorMaximize(){\n    this.setState({\n      editmaximized: !this.state.editmaximized\n    })\n  };\n  handlePreviewMaximize(){\n    this.setState({\n      previewmaximized:!this.state.previewmaximized\n    })\n  };\n\n  \n  \n  render() {\n    let classes = []\n   \n    if(this.state.editmaximized === true){\n      classes = ['edit maximized','preview hide','bi bi-arrows-angle-contract'];\n      \n    } else if(this.state.previewmaximized === true){\n      classes = ['edit hide','prev maximized','bi bi-arrows-angle-contract'];\n\n    }else{\n      classes= [\"edit \",\"prev\", \"bi bi-arrows-move\"];\n    };\n    //console.log(classes)\n    return (\n\n      <div className=\"App\"  >\n        <div className=\"App-header\" >\n          <div className={classes[0]} >\n            <Toolbar\n              text='Editor'\n              icon={classes[2]}\n              onClick={this.handleEditorMaximize}\n\n            />\n            <Edit \n              data={this.state.data} \n              onChange={this.handleChange} \n            />\n          </div>  \n          <div className={classes[1]} >\n            <Toolbar\n              text='Preview'\n              icon={classes[2]}\n              onClick={this.handlePreviewMaximize}\n            />\n            <Preview\n              data={this.state.data} \n            />\n          </div>\n          \n           \n        </div>\n      </div>\n    );\n  }\n};\nconst Toolbar = (props) => {\n  //console.log(props.onClick)\n  return(\n  <div className=\"toolbar\">\n    <i className=\"bi bi-file-text-fill\" />\n      {props.text}\n    <i className={props.icon} onClick={props.onClick}/>\n  </div>\n  );\n};\n\nconst Edit =(props)=> {\n  return(\n    <textarea  id=\"editor\"type=\"text\" value={props.data} onChange={props.onChange}></textarea>\n  );\n};\nconst Preview=(props)=>{\n  return (\n\n    <div className=\"text\" dangerouslySetInnerHTML={{__html: marked(props.data, { html: html })}} id=\"preview\"/>\n   \n  )\n  \n}\n\n\nexport default App;\n/*marked(props.data, { html: html }\n\n{__html: html}  */\n/**/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}